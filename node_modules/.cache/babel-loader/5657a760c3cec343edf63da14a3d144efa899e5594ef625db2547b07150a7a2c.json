{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * {@link workbox-core.cacheNames}.\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n    // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n    if (!this.plugins.some(p => 'cacheWillUpdate' in p)) {\n      this.plugins.unshift(cacheOkAndOpaquePlugin);\n    }\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: this.constructor.name,\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n  async _handle(request, handler) {\n    const logs = [];\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: this.constructor.name,\n        funcName: 'handle',\n        paramName: 'makeRequest'\n      });\n    }\n    const promises = [];\n    let timeoutId;\n    if (this._networkTimeoutSeconds) {\n      const {\n        id,\n        promise\n      } = this._getTimeoutPromise({\n        request,\n        logs,\n        handler\n      });\n      timeoutId = id;\n      promises.push(promise);\n    }\n    const networkPromise = this._getNetworkPromise({\n      timeoutId,\n      request,\n      logs,\n      handler\n    });\n    promises.push(networkPromise);\n    const response = await handler.waitUntil((async () => {\n      // Promise.race() will resolve as soon as the first promise resolves.\n      return (await handler.waitUntil(Promise.race(promises))) || (\n      // If Promise.race() resolved with null, it might be due to a network\n      // timeout + a cache miss. If that were to happen, we'd rather wait until\n      // the networkPromise resolves instead of returning null.\n      // Note that it's fine to await an already-resolved promise, so we don't\n      // have to check to see if it's still \"in flight\".\n      await networkPromise);\n    })());\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n      for (const log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url\n      });\n    }\n    return response;\n  }\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs array\n   * @param {Event} options.event\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  _getTimeoutPromise(_ref) {\n    let {\n      request,\n      logs,\n      handler\n    } = _ref;\n    let timeoutId;\n    const timeoutPromise = new Promise(resolve => {\n      const onNetworkTimeout = async () => {\n        if (process.env.NODE_ENV !== 'production') {\n          logs.push(\"Timing out the network response at \" + \"\".concat(this._networkTimeoutSeconds, \" seconds.\"));\n        }\n        resolve(await handler.cacheMatch(request));\n      };\n      timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n    });\n    return {\n      promise: timeoutPromise,\n      id: timeoutId\n    };\n  }\n  /**\n   * @param {Object} options\n   * @param {number|undefined} options.timeoutId\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs Array.\n   * @param {Event} options.event\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getNetworkPromise(_ref2) {\n    let {\n      timeoutId,\n      request,\n      logs,\n      handler\n    } = _ref2;\n    let error;\n    let response;\n    try {\n      response = await handler.fetchAndCachePut(request);\n    } catch (fetchError) {\n      if (fetchError instanceof Error) {\n        error = fetchError;\n      }\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (response) {\n        logs.push(\"Got response from network.\");\n      } else {\n        logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n      }\n    }\n    if (error || !response) {\n      response = await handler.cacheMatch(request);\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"'\") + \" cache.\");\n        } else {\n          logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache.\"));\n        }\n      }\n    }\n    return response;\n  }\n}\nexport { NetworkFirst };","map":{"version":3,"names":["assert","logger","WorkboxError","cacheOkAndOpaquePlugin","Strategy","messages","NetworkFirst","constructor","options","arguments","length","undefined","plugins","some","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","process","env","NODE_ENV","isType","moduleName","className","name","funcName","paramName","_handle","request","handler","logs","isInstance","Request","promises","timeoutId","id","promise","_getTimeoutPromise","push","networkPromise","_getNetworkPromise","response","waitUntil","Promise","race","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","_ref","timeoutPromise","resolve","onNetworkTimeout","concat","cacheMatch","setTimeout","_ref2","error","fetchAndCachePut","fetchError","Error","clearTimeout","cacheName"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-strategies/NetworkFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}