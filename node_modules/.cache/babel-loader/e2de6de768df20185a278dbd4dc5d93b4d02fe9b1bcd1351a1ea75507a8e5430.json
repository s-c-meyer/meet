{"ast":null,"code":"/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n  const strippedURL = new URL(fullURL);\n  for (const param of ignoreParams) {\n    strippedURL.searchParams.delete(param);\n  }\n  return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n  const strippedRequestURL = stripParams(request.url, ignoreParams);\n  // If the request doesn't include any ignored params, match as normal.\n  if (request.url === strippedRequestURL) {\n    return cache.match(request, matchOptions);\n  }\n  // Otherwise, match by comparing keys\n  const keysOptions = Object.assign(Object.assign({}, matchOptions), {\n    ignoreSearch: true\n  });\n  const cacheKeys = await cache.keys(request, keysOptions);\n  for (const cacheKey of cacheKeys) {\n    const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n    if (strippedRequestURL === strippedCacheKeyURL) {\n      return cache.match(cacheKey, matchOptions);\n    }\n  }\n  return;\n}\nexport { cacheMatchIgnoreParams };","map":{"version":3,"names":["stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","url","match","keysOptions","Object","assign","ignoreSearch","cacheKeys","keys","cacheKey","strippedCacheKeyURL"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-core/_private/cacheMatchIgnoreParams.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAgB;AACvB,SAASA,WAAWA,CAACC,OAAO,EAAEC,YAAY,EAAE;EACxC,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAACH,OAAO,CAAC;EACpC,KAAK,MAAMI,KAAK,IAAIH,YAAY,EAAE;IAC9BC,WAAW,CAACG,YAAY,CAACC,MAAM,CAACF,KAAK,CAAC;EAC1C;EACA,OAAOF,WAAW,CAACK,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,sBAAsBA,CAACC,KAAK,EAAEC,OAAO,EAAET,YAAY,EAAEU,YAAY,EAAE;EAC9E,MAAMC,kBAAkB,GAAGb,WAAW,CAACW,OAAO,CAACG,GAAG,EAAEZ,YAAY,CAAC;EACjE;EACA,IAAIS,OAAO,CAACG,GAAG,KAAKD,kBAAkB,EAAE;IACpC,OAAOH,KAAK,CAACK,KAAK,CAACJ,OAAO,EAAEC,YAAY,CAAC;EAC7C;EACA;EACA,MAAMI,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,YAAY,CAAC,EAAE;IAAEO,YAAY,EAAE;EAAK,CAAC,CAAC;EAC1F,MAAMC,SAAS,GAAG,MAAMV,KAAK,CAACW,IAAI,CAACV,OAAO,EAAEK,WAAW,CAAC;EACxD,KAAK,MAAMM,QAAQ,IAAIF,SAAS,EAAE;IAC9B,MAAMG,mBAAmB,GAAGvB,WAAW,CAACsB,QAAQ,CAACR,GAAG,EAAEZ,YAAY,CAAC;IACnE,IAAIW,kBAAkB,KAAKU,mBAAmB,EAAE;MAC5C,OAAOb,KAAK,CAACK,KAAK,CAACO,QAAQ,EAAEV,YAAY,CAAC;IAC9C;EACJ;EACA;AACJ;AACA,SAASH,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}