{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n  if (!Array.isArray(value)) {\n    throw new WorkboxError('not-an-array', details);\n  }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n  const type = typeof object[expectedMethod];\n  if (type !== 'function') {\n    details['expectedMethod'] = expectedMethod;\n    throw new WorkboxError('missing-a-method', details);\n  }\n};\nconst isType = (object, expectedType, details) => {\n  if (typeof object !== expectedType) {\n    details['expectedType'] = expectedType;\n    throw new WorkboxError('incorrect-type', details);\n  }\n};\nconst isInstance = (object,\n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n  if (!(object instanceof expectedClass)) {\n    details['expectedClassName'] = expectedClass.name;\n    throw new WorkboxError('incorrect-class', details);\n  }\n};\nconst isOneOf = (value, validValues, details) => {\n  if (!validValues.includes(value)) {\n    details['validValueDescription'] = \"Valid values are \".concat(JSON.stringify(validValues), \".\");\n    throw new WorkboxError('invalid-value', details);\n  }\n};\nconst isArrayOfClass = (value,\n// Need general type to do check later.\nexpectedClass,\n// eslint-disable-line\ndetails) => {\n  const error = new WorkboxError('not-array-of-class', details);\n  if (!Array.isArray(value)) {\n    throw error;\n  }\n  for (const item of value) {\n    if (!(item instanceof expectedClass)) {\n      throw error;\n    }\n  }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n  hasMethod,\n  isArray,\n  isInstance,\n  isOneOf,\n  isType,\n  isArrayOfClass\n};\nexport { finalAssertExports as assert };","map":{"version":3,"names":["WorkboxError","isArray","value","details","Array","hasMethod","object","expectedMethod","type","isType","expectedType","isInstance","expectedClass","name","isOneOf","validValues","includes","concat","JSON","stringify","isArrayOfClass","error","item","finalAssertExports","process","env","NODE_ENV","assert"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-core/_private/assert.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,OAAO,gBAAgB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EAChC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACC,KAAK,CAAC,EAAE;IACvB,MAAM,IAAIF,YAAY,CAAC,cAAc,EAAEG,OAAO,CAAC;EACnD;AACJ,CAAC;AACD,MAAME,SAAS,GAAGA,CAACC,MAAM,EAAEC,cAAc,EAAEJ,OAAO,KAAK;EACnD,MAAMK,IAAI,GAAG,OAAOF,MAAM,CAACC,cAAc,CAAC;EAC1C,IAAIC,IAAI,KAAK,UAAU,EAAE;IACrBL,OAAO,CAAC,gBAAgB,CAAC,GAAGI,cAAc;IAC1C,MAAM,IAAIP,YAAY,CAAC,kBAAkB,EAAEG,OAAO,CAAC;EACvD;AACJ,CAAC;AACD,MAAMM,MAAM,GAAGA,CAACH,MAAM,EAAEI,YAAY,EAAEP,OAAO,KAAK;EAC9C,IAAI,OAAOG,MAAM,KAAKI,YAAY,EAAE;IAChCP,OAAO,CAAC,cAAc,CAAC,GAAGO,YAAY;IACtC,MAAM,IAAIV,YAAY,CAAC,gBAAgB,EAAEG,OAAO,CAAC;EACrD;AACJ,CAAC;AACD,MAAMQ,UAAU,GAAGA,CAACL,MAAM;AAC1B;AACA;AACAM,aAAa,EAAET,OAAO,KAAK;EACvB,IAAI,EAAEG,MAAM,YAAYM,aAAa,CAAC,EAAE;IACpCT,OAAO,CAAC,mBAAmB,CAAC,GAAGS,aAAa,CAACC,IAAI;IACjD,MAAM,IAAIb,YAAY,CAAC,iBAAiB,EAAEG,OAAO,CAAC;EACtD;AACJ,CAAC;AACD,MAAMW,OAAO,GAAGA,CAACZ,KAAK,EAAEa,WAAW,EAAEZ,OAAO,KAAK;EAC7C,IAAI,CAACY,WAAW,CAACC,QAAQ,CAACd,KAAK,CAAC,EAAE;IAC9BC,OAAO,CAAC,uBAAuB,CAAC,uBAAAc,MAAA,CAAuBC,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAC,MAAG;IACrF,MAAM,IAAIf,YAAY,CAAC,eAAe,EAAEG,OAAO,CAAC;EACpD;AACJ,CAAC;AACD,MAAMiB,cAAc,GAAGA,CAAClB,KAAK;AAC7B;AACAU,aAAa;AAAE;AACfT,OAAO,KAAK;EACR,MAAMkB,KAAK,GAAG,IAAIrB,YAAY,CAAC,oBAAoB,EAAEG,OAAO,CAAC;EAC7D,IAAI,CAACC,KAAK,CAACH,OAAO,CAACC,KAAK,CAAC,EAAE;IACvB,MAAMmB,KAAK;EACf;EACA,KAAK,MAAMC,IAAI,IAAIpB,KAAK,EAAE;IACtB,IAAI,EAAEoB,IAAI,YAAYV,aAAa,CAAC,EAAE;MAClC,MAAMS,KAAK;IACf;EACJ;AACJ,CAAC;AACD,MAAME,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAC1D,IAAI,GACJ;EACErB,SAAS;EACTJ,OAAO;EACPU,UAAU;EACVG,OAAO;EACPL,MAAM;EACNW;AACJ,CAAC;AACL,SAASG,kBAAkB,IAAII,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}