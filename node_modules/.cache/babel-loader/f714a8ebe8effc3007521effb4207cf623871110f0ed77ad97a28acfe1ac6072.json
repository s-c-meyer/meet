{"ast":null,"code":"/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheFallbackPlugin {\n  /**\n   * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n   *\n   * @param {Object} config\n   * @param {string} config.fallbackURL A precached URL to use as the fallback\n   *     if the associated strategy can't generate a response.\n   * @param {PrecacheController} [config.precacheController] An optional\n   *     PrecacheController instance. If not provided, the default\n   *     PrecacheController will be used.\n   */\n  constructor(_ref) {\n    let {\n      fallbackURL,\n      precacheController\n    } = _ref;\n    /**\n     * @return {Promise<Response>} The precache response for the fallback URL.\n     *\n     * @private\n     */\n    this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\n    this._fallbackURL = fallbackURL;\n    this._precacheController = precacheController || getOrCreatePrecacheController();\n  }\n}\nexport { PrecacheFallbackPlugin };","map":{"version":3,"names":["getOrCreatePrecacheController","PrecacheFallbackPlugin","constructor","_ref","fallbackURL","precacheController","handlerDidError","_precacheController","matchPrecache","_fallbackURL"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-precaching/PrecacheFallbackPlugin.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheFallbackPlugin {\n    /**\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n     *\n     * @param {Object} config\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\n     *     if the associated strategy can't generate a response.\n     * @param {PrecacheController} [config.precacheController] An optional\n     *     PrecacheController instance. If not provided, the default\n     *     PrecacheController will be used.\n     */\n    constructor({ fallbackURL, precacheController, }) {\n        /**\n         * @return {Promise<Response>} The precache response for the fallback URL.\n         *\n         * @private\n         */\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\n        this._fallbackURL = fallbackURL;\n        this._precacheController =\n            precacheController || getOrCreatePrecacheController();\n    }\n}\nexport { PrecacheFallbackPlugin };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,6BAA6B,QAAQ,0CAA0C;AACxF,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,CAAC;EACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAAAC,IAAA,EAAuC;IAAA,IAAtC;MAAEC,WAAW;MAAEC;IAAoB,CAAC,GAAAF,IAAA;IAC5C;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACG,eAAe,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAACC,aAAa,CAAC,IAAI,CAACC,YAAY,CAAC;IACtF,IAAI,CAACA,YAAY,GAAGL,WAAW;IAC/B,IAAI,CAACG,mBAAmB,GACpBF,kBAAkB,IAAIL,6BAA6B,CAAC,CAAC;EAC7D;AACJ;AACA,SAASC,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}