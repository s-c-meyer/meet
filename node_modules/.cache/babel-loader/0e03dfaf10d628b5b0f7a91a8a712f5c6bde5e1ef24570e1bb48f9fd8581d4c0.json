{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n  /**\n   * If both `denylist` and `allowlist` are provided, the `denylist` will\n   * take precedence and the request will not match this route.\n   *\n   * The regular expressions in `allowlist` and `denylist`\n   * are matched against the concatenated\n   * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n   * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n   * portions of the requested URL.\n   *\n   * *Note*: These RegExps may be evaluated against every destination URL during\n   * a navigation. Avoid using\n   * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n   * or else your users may see delays when navigating your site.\n   *\n   * @param {workbox-routing~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {Object} options\n   * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n   * the route will not handle the request (even if a allowlist RegExp matches).\n   * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n   * match the URL's pathname and search parameter, the route will handle the\n   * request (assuming the denylist doesn't match).\n   */\n  constructor(handler) {\n    let {\n      allowlist = [/./],\n      denylist = []\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isArrayOfClass(allowlist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.allowlist'\n      });\n      assert.isArrayOfClass(denylist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.denylist'\n      });\n    }\n    super(options => this._match(options), handler);\n    this._allowlist = allowlist;\n    this._denylist = denylist;\n  }\n  /**\n   * Routes match handler.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {Request} options.request\n   * @return {boolean}\n   *\n   * @private\n   */\n  _match(_ref) {\n    let {\n      url,\n      request\n    } = _ref;\n    if (request && request.mode !== 'navigate') {\n      return false;\n    }\n    const pathnameAndSearch = url.pathname + url.search;\n    for (const regExp of this._denylist) {\n      if (regExp.test(pathnameAndSearch)) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(\"The navigation route \".concat(pathnameAndSearch, \" is not \") + \"being used, since the URL matches this denylist pattern: \" + \"\".concat(regExp.toString()));\n        }\n        return false;\n      }\n    }\n    if (this._allowlist.some(regExp => regExp.test(pathnameAndSearch))) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\"The navigation route \".concat(pathnameAndSearch, \" \") + \"is being used.\");\n      }\n      return true;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(\"The navigation route \".concat(pathnameAndSearch, \" is not \") + \"being used, since the URL being navigated to doesn't \" + \"match the allowlist.\");\n    }\n    return false;\n  }\n}\nexport { NavigationRoute };","map":{"version":3,"names":["assert","logger","Route","NavigationRoute","constructor","handler","allowlist","denylist","arguments","length","undefined","process","env","NODE_ENV","isArrayOfClass","RegExp","moduleName","className","funcName","paramName","options","_match","_allowlist","_denylist","_ref","url","request","mode","pathnameAndSearch","pathname","search","regExp","test","log","concat","toString","some","debug"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-routing/NavigationRoute.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * *Note*: These RegExps may be evaluated against every destination URL during\n     * a navigation. Avoid using\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n     * or else your users may see delays when navigating your site.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}