{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n  if (!entry) {\n    throw new WorkboxError('add-to-cache-list-unexpected-type', {\n      entry\n    });\n  }\n  // If a precache manifest entry is a string, it's assumed to be a versioned\n  // URL, like '/app.abcd1234.js'. Return as-is.\n  if (typeof entry === 'string') {\n    const urlObject = new URL(entry, location.href);\n    return {\n      cacheKey: urlObject.href,\n      url: urlObject.href\n    };\n  }\n  const {\n    revision,\n    url\n  } = entry;\n  if (!url) {\n    throw new WorkboxError('add-to-cache-list-unexpected-type', {\n      entry\n    });\n  }\n  // If there's just a URL and no revision, then it's also assumed to be a\n  // versioned URL.\n  if (!revision) {\n    const urlObject = new URL(url, location.href);\n    return {\n      cacheKey: urlObject.href,\n      url: urlObject.href\n    };\n  }\n  // Otherwise, construct a properly versioned URL using the custom Workbox\n  // search parameter along with the revision info.\n  const cacheKeyURL = new URL(url, location.href);\n  const originalURL = new URL(url, location.href);\n  cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n  return {\n    cacheKey: cacheKeyURL.href,\n    url: originalURL.href\n  };\n}","map":{"version":3,"names":["WorkboxError","REVISION_SEARCH_PARAM","createCacheKey","entry","urlObject","URL","location","href","cacheKey","url","revision","cacheKeyURL","originalURL","searchParams","set"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-precaching/utils/createCacheKey.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,uCAAuC;AACpE,OAAO,gBAAgB;AACvB;AACA,MAAMC,qBAAqB,GAAG,iBAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAE;EAClC,IAAI,CAACA,KAAK,EAAE;IACR,MAAM,IAAIH,YAAY,CAAC,mCAAmC,EAAE;MAAEG;IAAM,CAAC,CAAC;EAC1E;EACA;EACA;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAACF,KAAK,EAAEG,QAAQ,CAACC,IAAI,CAAC;IAC/C,OAAO;MACHC,QAAQ,EAAEJ,SAAS,CAACG,IAAI;MACxBE,GAAG,EAAEL,SAAS,CAACG;IACnB,CAAC;EACL;EACA,MAAM;IAAEG,QAAQ;IAAED;EAAI,CAAC,GAAGN,KAAK;EAC/B,IAAI,CAACM,GAAG,EAAE;IACN,MAAM,IAAIT,YAAY,CAAC,mCAAmC,EAAE;MAAEG;IAAM,CAAC,CAAC;EAC1E;EACA;EACA;EACA,IAAI,CAACO,QAAQ,EAAE;IACX,MAAMN,SAAS,GAAG,IAAIC,GAAG,CAACI,GAAG,EAAEH,QAAQ,CAACC,IAAI,CAAC;IAC7C,OAAO;MACHC,QAAQ,EAAEJ,SAAS,CAACG,IAAI;MACxBE,GAAG,EAAEL,SAAS,CAACG;IACnB,CAAC;EACL;EACA;EACA;EACA,MAAMI,WAAW,GAAG,IAAIN,GAAG,CAACI,GAAG,EAAEH,QAAQ,CAACC,IAAI,CAAC;EAC/C,MAAMK,WAAW,GAAG,IAAIP,GAAG,CAACI,GAAG,EAAEH,QAAQ,CAACC,IAAI,CAAC;EAC/CI,WAAW,CAACE,YAAY,CAACC,GAAG,CAACb,qBAAqB,EAAES,QAAQ,CAAC;EAC7D,OAAO;IACHF,QAAQ,EAAEG,WAAW,CAACJ,IAAI;IAC1BE,GAAG,EAAEG,WAAW,CAACL;EACrB,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}