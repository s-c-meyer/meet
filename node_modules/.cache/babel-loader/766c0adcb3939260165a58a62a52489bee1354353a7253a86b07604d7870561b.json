{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n  /**\n   * @param {Object} [options]\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n   * that fail to respond within the timeout will result in a network error.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n  async _handle(request, handler) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: this.constructor.name,\n        funcName: '_handle',\n        paramName: 'request'\n      });\n    }\n    let error = undefined;\n    let response;\n    try {\n      const promises = [handler.fetch(request)];\n      if (this._networkTimeoutSeconds) {\n        const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n        promises.push(timeoutPromise);\n      }\n      response = await Promise.race(promises);\n      if (!response) {\n        throw new Error(\"Timed out the network response after \" + \"\".concat(this._networkTimeoutSeconds, \" seconds.\"));\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        error = err;\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n      if (response) {\n        logger.log(\"Got response from network.\");\n      } else {\n        logger.log(\"Unable to get a response from the network.\");\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url,\n        error\n      });\n    }\n    return response;\n  }\n}\nexport { NetworkOnly };","map":{"version":3,"names":["assert","logger","timeout","WorkboxError","Strategy","messages","NetworkOnly","constructor","options","arguments","length","undefined","_networkTimeoutSeconds","networkTimeoutSeconds","_handle","request","handler","process","env","NODE_ENV","isInstance","Request","moduleName","className","name","funcName","paramName","error","response","promises","fetch","timeoutPromise","push","Promise","race","Error","concat","err","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-strategies/NetworkOnly.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,iCAAiC;AACxD,SAASC,MAAM,QAAQ,iCAAiC;AACxD,SAASC,OAAO,QAAQ,kCAAkC;AAC1D,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASF,QAAQ,CAAC;EAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,WAAWA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACpB,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACI,sBAAsB,GAAGJ,OAAO,CAACK,qBAAqB,IAAI,CAAC;EACpE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,OAAOA,CAACC,OAAO,EAAEC,OAAO,EAAE;IAC5B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCnB,MAAM,CAACoB,UAAU,CAACL,OAAO,EAAEM,OAAO,EAAE;QAChCC,UAAU,EAAE,oBAAoB;QAChCC,SAAS,EAAE,IAAI,CAAChB,WAAW,CAACiB,IAAI;QAChCC,QAAQ,EAAE,SAAS;QACnBC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACA,IAAIC,KAAK,GAAGhB,SAAS;IACrB,IAAIiB,QAAQ;IACZ,IAAI;MACA,MAAMC,QAAQ,GAAG,CACbb,OAAO,CAACc,KAAK,CAACf,OAAO,CAAC,CACzB;MACD,IAAI,IAAI,CAACH,sBAAsB,EAAE;QAC7B,MAAMmB,cAAc,GAAG7B,OAAO,CAAC,IAAI,CAACU,sBAAsB,GAAG,IAAI,CAAC;QAClEiB,QAAQ,CAACG,IAAI,CAACD,cAAc,CAAC;MACjC;MACAH,QAAQ,GAAG,MAAMK,OAAO,CAACC,IAAI,CAACL,QAAQ,CAAC;MACvC,IAAI,CAACD,QAAQ,EAAE;QACX,MAAM,IAAIO,KAAK,CAAC,6CAAAC,MAAA,CACT,IAAI,CAACxB,sBAAsB,cAAW,CAAC;MAClD;IACJ,CAAC,CACD,OAAOyB,GAAG,EAAE;MACR,IAAIA,GAAG,YAAYF,KAAK,EAAE;QACtBR,KAAK,GAAGU,GAAG;MACf;IACJ;IACA,IAAIpB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvClB,MAAM,CAACqC,cAAc,CAACjC,QAAQ,CAACkC,aAAa,CAAC,IAAI,CAAChC,WAAW,CAACiB,IAAI,EAAET,OAAO,CAAC,CAAC;MAC7E,IAAIa,QAAQ,EAAE;QACV3B,MAAM,CAACuC,GAAG,6BAA6B,CAAC;MAC5C,CAAC,MACI;QACDvC,MAAM,CAACuC,GAAG,6CAA6C,CAAC;MAC5D;MACAnC,QAAQ,CAACoC,kBAAkB,CAACb,QAAQ,CAAC;MACrC3B,MAAM,CAACyC,QAAQ,CAAC,CAAC;IACrB;IACA,IAAI,CAACd,QAAQ,EAAE;MACX,MAAM,IAAIzB,YAAY,CAAC,aAAa,EAAE;QAAEwC,GAAG,EAAE5B,OAAO,CAAC4B,GAAG;QAAEhB;MAAM,CAAC,CAAC;IACtE;IACA,OAAOC,QAAQ;EACnB;AACJ;AACA,SAAStB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}