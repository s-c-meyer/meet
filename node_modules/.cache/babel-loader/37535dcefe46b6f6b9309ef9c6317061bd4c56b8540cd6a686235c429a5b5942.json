{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = unNormalizedUrl => {\n  const url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  constructor(cacheName) {\n    this._db = null;\n    this._cacheName = cacheName;\n  }\n  /**\n   * Performs an upgrade of indexedDB.\n   *\n   * @param {IDBPDatabase<CacheDbSchema>} db\n   *\n   * @private\n   */\n  _upgradeDb(db) {\n    // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n    // have to use the `id` keyPath here and create our own values (a\n    // concatenation of `url + cacheName`) instead of simply using\n    // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n    const objStore = db.createObjectStore(CACHE_OBJECT_STORE, {\n      keyPath: 'id'\n    });\n    // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n    // create a single index with the keyPath `['cacheName', 'timestamp']`\n    // instead of doing both these indexes.\n    objStore.createIndex('cacheName', 'cacheName', {\n      unique: false\n    });\n    objStore.createIndex('timestamp', 'timestamp', {\n      unique: false\n    });\n  }\n  /**\n   * Performs an upgrade of indexedDB and deletes deprecated DBs.\n   *\n   * @param {IDBPDatabase<CacheDbSchema>} db\n   *\n   * @private\n   */\n  _upgradeDbAndDeleteOldDbs(db) {\n    this._upgradeDb(db);\n    if (this._cacheName) {\n      void deleteDB(this._cacheName);\n    }\n  }\n  /**\n   * @param {string} url\n   * @param {number} timestamp\n   *\n   * @private\n   */\n  async setTimestamp(url, timestamp) {\n    url = normalizeURL(url);\n    const entry = {\n      url,\n      timestamp,\n      cacheName: this._cacheName,\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      id: this._getId(url)\n    };\n    const db = await this.getDb();\n    const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n      durability: 'relaxed'\n    });\n    await tx.store.put(entry);\n    await tx.done;\n  }\n  /**\n   * Returns the timestamp stored for a given URL.\n   *\n   * @param {string} url\n   * @return {number | undefined}\n   *\n   * @private\n   */\n  async getTimestamp(url) {\n    const db = await this.getDb();\n    const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n    return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n  }\n  /**\n   * Iterates through all the entries in the object store (from newest to\n   * oldest) and removes entries once either `maxCount` is reached or the\n   * entry's timestamp is less than `minTimestamp`.\n   *\n   * @param {number} minTimestamp\n   * @param {number} maxCount\n   * @return {Array<string>}\n   *\n   * @private\n   */\n  async expireEntries(minTimestamp, maxCount) {\n    const db = await this.getDb();\n    let cursor = await db.transaction(CACHE_OBJECT_STORE).store.index('timestamp').openCursor(null, 'prev');\n    const entriesToDelete = [];\n    let entriesNotDeletedCount = 0;\n    while (cursor) {\n      const result = cursor.value;\n      // TODO(philipwalton): once we can use a multi-key index, we\n      // won't have to check `cacheName` here.\n      if (result.cacheName === this._cacheName) {\n        // Delete an entry if it's older than the max age or\n        // if we already have the max number allowed.\n        if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n          // TODO(philipwalton): we should be able to delete the\n          // entry right here, but doing so causes an iteration\n          // bug in Safari stable (fixed in TP). Instead we can\n          // store the keys of the entries to delete, and then\n          // delete the separate transactions.\n          // https://github.com/GoogleChrome/workbox/issues/1978\n          // cursor.delete();\n          // We only need to return the URL, not the whole entry.\n          entriesToDelete.push(cursor.value);\n        } else {\n          entriesNotDeletedCount++;\n        }\n      }\n      cursor = await cursor.continue();\n    }\n    // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n    // we should be able to remove this loop and do the entry deletion in the\n    // cursor loop above:\n    // https://github.com/GoogleChrome/workbox/issues/1978\n    const urlsDeleted = [];\n    for (const entry of entriesToDelete) {\n      await db.delete(CACHE_OBJECT_STORE, entry.id);\n      urlsDeleted.push(entry.url);\n    }\n    return urlsDeleted;\n  }\n  /**\n   * Takes a URL and returns an ID that will be unique in the object store.\n   *\n   * @param {string} url\n   * @return {string}\n   *\n   * @private\n   */\n  _getId(url) {\n    // Creating an ID from the URL and cache name won't be necessary once\n    // Edge switches to Chromium and all browsers we support work with\n    // array keyPaths.\n    return this._cacheName + '|' + normalizeURL(url);\n  }\n  /**\n   * Returns an open connection to the database.\n   *\n   * @private\n   */\n  async getDb() {\n    if (!this._db) {\n      this._db = await openDB(DB_NAME, 1, {\n        upgrade: this._upgradeDbAndDeleteOldDbs.bind(this)\n      });\n    }\n    return this._db;\n  }\n}\nexport { CacheTimestampsModel };","map":{"version":3,"names":["openDB","deleteDB","DB_NAME","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","constructor","cacheName","_db","_cacheName","_upgradeDb","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","setTimestamp","timestamp","entry","id","_getId","getDb","tx","transaction","durability","store","put","done","getTimestamp","get","expireEntries","minTimestamp","maxCount","cursor","index","openCursor","entriesToDelete","entriesNotDeletedCount","result","value","push","continue","urlsDeleted","delete","upgrade","bind"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}