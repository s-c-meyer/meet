{"ast":null,"code":"/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n  constructor(_ref) {\n    let {\n      precacheController\n    } = _ref;\n    this.cacheKeyWillBeUsed = async _ref2 => {\n      let {\n        request,\n        params\n      } = _ref2;\n      // Params is type any, can't change right now.\n      /* eslint-disable */\n      const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) || this._precacheController.getCacheKeyForURL(request.url);\n      /* eslint-enable */\n      return cacheKey ? new Request(cacheKey, {\n        headers: request.headers\n      }) : request;\n    };\n    this._precacheController = precacheController;\n  }\n}\nexport { PrecacheCacheKeyPlugin };","map":{"version":3,"names":["PrecacheCacheKeyPlugin","constructor","_ref","precacheController","cacheKeyWillBeUsed","_ref2","request","params","cacheKey","_precacheController","getCacheKeyForURL","url","Request","headers"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAgB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,sBAAsB,CAAC;EACzBC,WAAWA,CAAAC,IAAA,EAAyB;IAAA,IAAxB;MAAEC;IAAmB,CAAC,GAAAD,IAAA;IAC9B,IAAI,CAACE,kBAAkB,GAAG,MAAAC,KAAA,IAAgC;MAAA,IAAzB;QAAEC,OAAO;QAAEC;MAAQ,CAAC,GAAAF,KAAA;MACjD;MACA;MACA,MAAMG,QAAQ,GAAG,CAACD,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACC,QAAQ,KAC7E,IAAI,CAACC,mBAAmB,CAACC,iBAAiB,CAACJ,OAAO,CAACK,GAAG,CAAC;MAC3D;MACA,OAAOH,QAAQ,GACT,IAAII,OAAO,CAACJ,QAAQ,EAAE;QAAEK,OAAO,EAAEP,OAAO,CAACO;MAAQ,CAAC,CAAC,GACnDP,OAAO;IACjB,CAAC;IACD,IAAI,CAACG,mBAAmB,GAAGN,kBAAkB;EACjD;AACJ;AACA,SAASH,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}