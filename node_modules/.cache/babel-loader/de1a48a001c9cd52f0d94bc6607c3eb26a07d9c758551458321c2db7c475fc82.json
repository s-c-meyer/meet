{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function generateURLVariations(url) {\n  let {\n    ignoreURLParametersMatching = [/^utm_/, /^fbclid$/],\n    directoryIndex = 'index.html',\n    cleanURLs = true,\n    urlManipulation\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function* () {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n      const directoryURL = new URL(urlWithoutIgnoredParams.href);\n      directoryURL.pathname += directoryIndex;\n      yield directoryURL.href;\n    }\n    if (cleanURLs) {\n      const cleanURL = new URL(urlWithoutIgnoredParams.href);\n      cleanURL.pathname += '.html';\n      yield cleanURL.href;\n    }\n    if (urlManipulation) {\n      const additionalURLs = urlManipulation({\n        url: urlObject\n      });\n      for (const urlToAttempt of additionalURLs) {\n        yield urlToAttempt.href;\n      }\n    }\n  }();\n}","map":{"version":3,"names":["removeIgnoredSearchParams","generateURLVariations","url","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","arguments","length","undefined","urlObject","URL","location","href","hash","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt"],"sources":["C:/Users/meyer/Documents/careerfoundry/meet/node_modules/workbox-precaching/utils/generateURLVariations.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,yBAAyB,QAAQ,gCAAgC;AAC1E,OAAO,gBAAgB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAUC,qBAAqBA,CAACC,GAAG;EAAA,IAAE;IAAEC,2BAA2B,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC;IAAEC,cAAc,GAAG,YAAY;IAAEC,SAAS,GAAG,IAAI;IAAEC;EAAiB,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,oBAAE;IACzK,MAAMG,SAAS,GAAG,IAAIC,GAAG,CAACT,GAAG,EAAEU,QAAQ,CAACC,IAAI,CAAC;IAC7CH,SAAS,CAACI,IAAI,GAAG,EAAE;IACnB,MAAMJ,SAAS,CAACG,IAAI;IACpB,MAAME,uBAAuB,GAAGf,yBAAyB,CAACU,SAAS,EAAEP,2BAA2B,CAAC;IACjG,MAAMY,uBAAuB,CAACF,IAAI;IAClC,IAAIT,cAAc,IAAIW,uBAAuB,CAACC,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAClE,MAAMC,YAAY,GAAG,IAAIP,GAAG,CAACI,uBAAuB,CAACF,IAAI,CAAC;MAC1DK,YAAY,CAACF,QAAQ,IAAIZ,cAAc;MACvC,MAAMc,YAAY,CAACL,IAAI;IAC3B;IACA,IAAIR,SAAS,EAAE;MACX,MAAMc,QAAQ,GAAG,IAAIR,GAAG,CAACI,uBAAuB,CAACF,IAAI,CAAC;MACtDM,QAAQ,CAACH,QAAQ,IAAI,OAAO;MAC5B,MAAMG,QAAQ,CAACN,IAAI;IACvB;IACA,IAAIP,eAAe,EAAE;MACjB,MAAMc,cAAc,GAAGd,eAAe,CAAC;QAAEJ,GAAG,EAAEQ;MAAU,CAAC,CAAC;MAC1D,KAAK,MAAMW,YAAY,IAAID,cAAc,EAAE;QACvC,MAAMC,YAAY,CAACR,IAAI;MAC3B;IACJ;EACJ,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}